	
	public static List<HeuerNewsDTO> getNewsListByCategory(javax.persistence.EntityManager entityManager, String category ,int numberOfRows) {
		
		Query query = entityManager.createNamedQuery("SELECT ni.id,ni.headline,ni.lead_text,ni.teaser,ni.`text`,ni.created_at "
		+ "FROM news_items ni ,news_categories nc,news_item_categories nic "
		+ "WHERE ni.id=nic.news_items_id " 
		+ "AND nic.keyword_id=nc.id "
		+ "AND nc.name =:category "
		+ "ORDER BY created_at DESC LIMIT :numberOfRows");
		query.setParameter("category",category);
		query.setParameter("numberOfRows",numberOfRows);
		//query.setMaxResults(numberOfRows);
		
		List<Object[]> rowSet = query.getResultList();
		
		if(rowSet != null){return null;}
		
		List<HeuerNewsDTO> newsDTOs = rowSet.stream().map(row -> {
			HeuerNewsDTO newsDTO = new HeuerNewsDTO();
			Integer newsId = (Integer) row[0];
			newsDTO.setId(Long.valueOf(newsId.longValue()));
			newsDTO.setHeadline(row[1].toString());
			newsDTO.setLeadText(row[2].toString());
			newsDTO.setTeaser(row[3].toString());
			newsDTO.setText(row[4].toString());
			
			if (newsId != null) {
				Query queryRelatedMediaItems = entityManager
						.createNativeQuery(
								"SELECT mi.* FROM news_item_images nii,media_items mi WHERE nii.media_items_id=mi.id AND nii.relation_type='user' AND nii.news_items_id=:newsId",
								MediaItem.class);
				queryRelatedMediaItems.setParameter("newsId", newsId);
				@SuppressWarnings("unchecked")
				List<MediaItem> images = queryRelatedMediaItems.getResultList();
				newsDTO.setImages(images.parallelStream().map(MediaItemDTO::new).collect(Collectors.toList()));
			}
			
			return newsDTO;
		}).collect(Collectors.toList());
		
		return newsDTOs;
	}
	
public static List<HeuerNewsDTO> getLimitedNewsByCategory(javax.persistence.EntityManager entityManager, String category ,int limit) {
		
		Query query = entityManager.createNamedQuery("SELECT ni.* "
		+ "FROM news_items ni ,news_categories nc,news_item_categories nic "
		+ "WHERE ni.id=nic.news_items_id " 
		+ "AND nic.keyword_id=nc.id "
		+ "AND nc.name =:category "
		+ "ORDER BY created_at DESC LIMIT :limit",HeuerNewsItem.class);
		
		query.setParameter("category",category);
		query.setParameter("numberOfRows",limit);
		//query.setMaxResults(limit);
		@SuppressWarnings("unchecked")
		List<HeuerNewsItem> rowSet = query.getResultList();
		
		if(rowSet == null){return null;}
		
		return rowSet.stream().map(HeuerNewsDTO::new).map(heuerNewsDTO -> {
				Query queryRelatedMediaItems = entityManager
						.createNativeQuery(
								"SELECT mi.* FROM news_item_images nii,media_items mi "
								+ "WHERE nii.media_items_id=mi.id "
								+ "AND nii.relation_type='user' "
								+ "AND nii.news_items_id=:newsId",MediaItem.class);
				queryRelatedMediaItems.setParameter("newsId",heuerNewsDTO.getId());
				@SuppressWarnings("unchecked")
				List<MediaItem> images = queryRelatedMediaItems.getResultList();
				heuerNewsDTO.setImages(images.parallelStream().map(MediaItemDTO::new).collect(Collectors.toList()));
			return heuerNewsDTO;
		}).collect(Collectors.toList());
	}
	
